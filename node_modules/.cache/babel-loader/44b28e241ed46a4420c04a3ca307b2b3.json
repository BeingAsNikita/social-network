{"ast":null,"code":"var _jsxFileName = \"/home/nikita/Documents/it-kama/it-kama/src/components/Users/Paginaton.jsx\";\nimport React, { useState } from 'react';\nimport css from './Users.module.css';\n\nconst Pagination = ({\n  totalCount,\n  pageSize,\n  currentPage,\n  className,\n  portionSize,\n  onPageChanged\n}) => {\n  let pagesCount = Math.ceil(totalCount / pageSize);\n  let pages = [];\n\n  for (let i = 1; i <= pagesCount; i++) {\n    pages.push(i);\n  }\n\n  let portionCount = Math.ceil(pagesCount / portionSize);\n  let [portionNumber, setPortionNember] = useState(1);\n  let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n  let rigthPortionPageNumber = portionNumber * portionSize;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, portionNumber > 1 && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNember(portionNumber - 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }\n  }, \"Prev\"), pages.filter(p => leftPortionPageNumber <= p && p <= rigthPortionPageNumber).map((p, index) => {\n    return /*#__PURE__*/React.createElement(\"span\", {\n      key: index,\n      onClick: () => {\n        onPageChanged(p);\n      },\n      className: currentPage === p && css.current,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }\n    }, p);\n  }), portionNumber <= 1 && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      setPortionNember(portionNumber + 1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 17\n    }\n  }, \"Next\"));\n};\n\nexport default Pagination;","map":{"version":3,"sources":["/home/nikita/Documents/it-kama/it-kama/src/components/Users/Paginaton.jsx"],"names":["React","useState","css","Pagination","totalCount","pageSize","currentPage","className","portionSize","onPageChanged","pagesCount","Math","ceil","pages","i","push","portionCount","portionNumber","setPortionNember","leftPortionPageNumber","rigthPortionPageNumber","filter","p","map","index","current"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,GAAP,MAAgB,oBAAhB;;AAKA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA,WAAxB;AAAqCC,EAAAA,SAArC;AAAgDC,EAAAA,WAAhD;AAA6DC,EAAAA;AAA7D,CAAD,KAAkF;AACjG,MAAIC,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUR,UAAU,GAAGC,QAAvB,CAAjB;AACA,MAAIQ,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIJ,UAArB,EAAiCI,CAAC,EAAlC,EAAsC;AAClCD,IAAAA,KAAK,CAACE,IAAN,CAAWD,CAAX;AACH;;AAED,MAAIE,YAAY,GAAGL,IAAI,CAACC,IAAL,CAAWF,UAAU,GAACF,WAAtB,CAAnB;AACA,MAAI,CAACS,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,CAAD,CAAhD;AACA,MAAIkB,qBAAqB,GAAG,CAACF,aAAa,GAAG,CAAjB,IAAsBT,WAAtB,GAAoC,CAAhE;AACA,MAAIY,sBAAsB,GAAGH,aAAa,GAAGT,WAA7C;AAEA,sBAEI;AAAK,IAAA,SAAS,EAAED,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQU,aAAa,GAAG,CAAhB,iBACA;AAAQ,IAAA,OAAO,EAAI,MAAM;AAAEC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAoC,KAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,EAOQJ,KAAK,CAACQ,MAAN,CAAcC,CAAC,IAAIH,qBAAqB,IAAIG,CAAzB,IAA8BA,CAAC,IAAIF,sBAAtD,EACCG,GADD,CACK,CAACD,CAAD,EAAIE,KAAJ,KAAc;AACf,wBACI;AAAM,MAAA,GAAG,EAAEA,KAAX;AACI,MAAA,OAAO,EAAE,MAAM;AAAEf,QAAAA,aAAa,CAACa,CAAD,CAAb;AAAkB,OADvC;AAEI,MAAA,SAAS,EAAGhB,WAAW,KAAKgB,CAAhB,IAAqBpB,GAAG,CAACuB,OAFzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEmDH,CAFnD,CADJ;AAKH,GAPD,CAPR,EAkBQL,aAAa,IAAI,CAAjB,iBACA;AAAQ,IAAA,OAAO,EAAI,MAAM;AAACC,MAAAA,gBAAgB,CAACD,aAAa,GAAG,CAAjB,CAAhB;AAAoC,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBR,CAFJ;AA0BH,CAtCD;;AA0CA,eAAed,UAAf","sourcesContent":["import React, { useState } from 'react';\nimport css from './Users.module.css';\n\n\n\n\nconst Pagination = ({ totalCount, pageSize, currentPage, className, portionSize, onPageChanged }) => {\n    let pagesCount = Math.ceil(totalCount / pageSize);\n    let pages = [];\n    for (let i = 1; i <= pagesCount; i++) {\n        pages.push(i)\n    }\n\n    let portionCount = Math.ceil( pagesCount/portionSize);\n    let [portionNumber, setPortionNember] = useState(1);\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\n    let rigthPortionPageNumber = portionNumber * portionSize\n\n    return (\n\n        <div className={className}>\n            {\n                portionNumber > 1 &&\n                <button onClick = {() => { setPortionNember(portionNumber - 1)}}>Prev</button>\n            }\n            {\n\n                pages.filter( p => leftPortionPageNumber <= p && p <= rigthPortionPageNumber )\n                .map((p, index) => {\n                    return (\n                        <span key={index}\n                            onClick={() => { onPageChanged(p) }}\n                            className={ currentPage === p && css.current}>{p}</span>\n                    )\n                })\n            }\n\n            {\n                portionNumber <= 1 &&\n                <button onClick = {() => {setPortionNember(portionNumber + 1)}}>Next</button>\n            }\n        </div>\n\n    )\n}\n\n\n\nexport default Pagination;"]},"metadata":{},"sourceType":"module"}