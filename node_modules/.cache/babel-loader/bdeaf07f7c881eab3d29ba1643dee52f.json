{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nexport const authSuccess = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const getAuthData = () => {\n  return async dispatch => {\n    let res = await authAPI.me();\n\n    if (res.data.resultCode === 0) {\n      let {\n        login,\n        id,\n        email\n      } = res.data.data;\n      dispatch(authSuccess(id, email, login, true));\n      /* dispatch(setUser(id)); */\n    }\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(getAuthData());\n      } else {\n        let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error';\n        dispatch(stopSubmit('loginForm', {\n          _error: message\n        }));\n      }\n    });\n  };\n};\nexport const logout = (id, email, login) => {\n  return dispatch => {\n    authAPI.logout().then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(authSuccess(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReduser;","map":{"version":3,"sources":["/home/nikita/Documents/it-kama/it-kama/src/redux/authReduser.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","authSuccess","id","email","login","isAuth","type","payload","initialState","authReduser","state","action","getAuthData","dispatch","res","me","data","resultCode","password","rememberMe","then","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,MAAMC,aAAa,GAAG,eAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAA+B;AAAEC,EAAAA,IAAI,EAAEN,aAAR;AAAuBO,EAAAA,OAAO,EAAE;AAAEL,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB;AAAhC,CAA/B,CAApB;AAEP,IAAIG,YAAY,GAAG;AACfN,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAOA,OAAO,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAEzD,UAAQA,MAAM,CAACL,IAAf;AAEI,SAAKN,aAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEH,WAAGC,MAAM,CAACJ;AAFP,OAAP;;AAKJ;AACI,aAAOG,KAAP;AATR;AAWH,CAbM;AAeP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,SAAO,MAAMC,QAAN,IAAkB;AACvB,QAAIC,GAAG,GAAI,MAAMhB,OAAO,CAACiB,EAAR,EAAjB;;AACM,QAAID,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,UAAI;AAAEb,QAAAA,KAAF;AAASF,QAAAA,EAAT;AAAaC,QAAAA;AAAb,UAAuBW,GAAG,CAACE,IAAJ,CAASA,IAApC;AACAH,MAAAA,QAAQ,CAACZ,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACA;AACH;AAER,GARD;AASH,CAVM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiC;AAClD,SAAON,QAAQ,IAAI;AACff,IAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBe,QAArB,EAA+BC,UAA/B,EAA2CC,IAA3C,CAAgDN,GAAG,IAAI;AACnD,UAAIA,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACH,OAFD,MAEO;AACH,YAAIS,OAAO,GAAGP,GAAG,CAACE,IAAJ,CAASM,QAAT,CAAkBC,MAAlB,GAA2B,CAA3B,GAA+BT,GAAG,CAACE,IAAJ,CAASM,QAAT,CAAkB,CAAlB,CAA/B,GAAsD,YAApE;AACAT,QAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAc;AAAEyB,UAAAA,MAAM,EAAEH;AAAV,SAAd,CAAX,CAAR;AACH;AACJ,KAPD;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMI,MAAM,GAAG,CAACvB,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAwB;AAC1C,SAAOS,QAAQ,IAAI;AACff,IAAAA,OAAO,CAAC2B,MAAR,GAAiBL,IAAjB,CAAsBN,GAAG,IAAI;AACzB,UAAIA,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,QAAAA,QAAQ,CAACZ,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAeQ,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\n\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nexport const authSuccess = (id, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { id, email, login, isAuth } })\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nexport const authReduser = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const getAuthData = () => {\n    return async dispatch => {\n      let res =  await authAPI.me()\n            if (res.data.resultCode === 0) {\n                let { login, id, email } = res.data.data;\n                dispatch(authSuccess(id, email, login, true));\n                /* dispatch(setUser(id)); */\n            }\n        \n    }\n}\n\nexport const login = (email, password, rememberMe) => {\n    return dispatch => {\n        authAPI.login(email, password, rememberMe).then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(getAuthData())\n            } else {\n                let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\n                dispatch(stopSubmit('loginForm', { _error: message }))\n            }\n        })\n    }\n}\n\nexport const logout = (id, email, login, ) => {\n    return dispatch => {\n        authAPI.logout().then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(authSuccess(null, null, null, false));\n            }\n        })\n    }\n}\n\nexport default authReduser;"]},"metadata":{},"sourceType":"module"}