{"ast":null,"code":"var _jsxFileName = \"/home/nikita/Documents/it-kama/it-kama/src/components/common/FormsControls/FormsControls.jsx\";\nimport React from \"react\";\nimport css from './FormControls.module.css';\nexport const Element = Element => ({\n  input,\n  meta,\n  ...props\n}) => {\n  const hasError = meta.touched && meta.error;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: css.formControl + \" \" + (hasError ? css.error : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Element, Object.assign({}, input, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  })), hasError && /*#__PURE__*/React.createElement(\"span\", {\n    className: css.alert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 23\n    }\n  }, \" \", meta.error, \" \"));\n};","map":{"version":3,"sources":["/home/nikita/Documents/it-kama/it-kama/src/components/common/FormsControls/FormsControls.jsx"],"names":["React","css","Element","input","meta","props","hasError","touched","error","formControl","alert"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,2BAAhB;AAEA,OAAQ,MAAMC,OAAO,GAAGA,OAAO,IAAI,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAe,KAAGC;AAAlB,CAAD,KAA+B;AAC9D,QAAMC,QAAQ,GAAGF,IAAI,CAACG,OAAL,IAAgBH,IAAI,CAACI,KAAtC;AACA,sBACE;AAAK,IAAA,SAAS,EAAGP,GAAG,CAACQ,WAAJ,GAAkB,GAAlB,IAAyBH,QAAQ,GAAGL,GAAG,CAACO,KAAP,GAAe,EAAhD,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,OAAD,oBAAaL,KAAb,EAAwBE,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEIC,QAAQ,iBAAI;AAAM,IAAA,SAAS,EAAEL,GAAG,CAACS,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA+BN,IAAI,CAACI,KAApC,MAFhB,CADF;AAMD,CARK","sourcesContent":["\nimport React from \"react\";\nimport css from './FormControls.module.css'\n\nexport  const Element = Element => ({ input, meta, ...props }) => {\n    const hasError = meta.touched && meta.error;\n    return (\n      <div className={ css.formControl + \" \" + (hasError ? css.error : \"\") }>\n        <Element {...input} {...props} />\n        { hasError && <span className={css.alert}> { meta.error } </span> }\n      </div>\n    );\n  };"]},"metadata":{},"sourceType":"module"}