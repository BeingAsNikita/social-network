{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nexport const authSuccess = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const getAuthData = () => {\n  return dispatch => {\n    authAPI.me().then(res => {\n      if (res.data.resultCode === 0) {\n        let {\n          login,\n          id,\n          email\n        } = res.data.data;\n        dispatch(authSuccess(id, email, login, true));\n        /* dispatch(setUser(id)); */\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return dispatch => {\n    authAPI.login(email, password, rememberMe).then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(getAuthData());\n      }\n\n      let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error';\n      dispatch(stopSubmit('login', {\n        _error: message\n      }));\n    });\n  };\n};\nexport const logout = (id, email, login) => {\n  return dispatch => {\n    authAPI.logout().then(res => {\n      if (res.data.resultCode === 0) {\n        dispatch(authSuccess(null, null, null, false));\n      }\n    });\n  };\n};\nexport default authReduser;","map":{"version":3,"sources":["/home/nikita/Documents/it-kama/it-kama/src/redux/authReduser.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","authSuccess","id","email","login","isAuth","type","payload","initialState","authReduser","state","action","getAuthData","dispatch","me","then","res","data","resultCode","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,MAAMC,aAAa,GAAG,eAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAA+B;AAAEC,EAAAA,IAAI,EAAEN,aAAR;AAAuBO,EAAAA,OAAO,EAAE;AAACL,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA;AAAnB;AAAhC,CAA/B,CAApB;AAEP,IAAIG,YAAY,GAAG;AACfN,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAOA,OAAO,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAEzD,UAAQA,MAAM,CAACL,IAAf;AAEI,SAAKN,aAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEH,WAAGC,MAAM,CAACJ;AAFP,OAAP;;AAKJ;AACI,aAAOG,KAAP;AATR;AAWH,CAbM;AAeP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,SAAOC,QAAQ,IAAI;AACff,IAAAA,OAAO,CAACgB,EAAR,GAAaC,IAAb,CAAkBC,GAAG,IAAI;AACjB,UAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,YAAI;AAAEd,UAAAA,KAAF;AAASF,UAAAA,EAAT;AAAaC,UAAAA;AAAb,YAAuBa,GAAG,CAACC,IAAJ,CAASA,IAApC;AACAJ,QAAAA,QAAQ,CAACZ,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACA;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC;AAClD,SAAOP,QAAQ,IAAI;AACff,IAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBgB,QAArB,EAA+BC,UAA/B,EAA2CL,IAA3C,CAAgDC,GAAG,IAAI;AACnD,UAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BL,QAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACH;;AACD,UAAIS,OAAO,GAAGL,GAAG,CAACC,IAAJ,CAASK,QAAT,CAAkBC,MAAlB,GAA2B,CAA3B,GAAkCP,GAAG,CAACC,IAAJ,CAASK,QAAT,CAAkB,CAAlB,CAAlC,GAAyD,YAAvE;AACAT,MAAAA,QAAQ,CAACd,UAAU,CAAC,OAAD,EAAU;AAACyB,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACH,KAND;AAOH,GARD;AASH,CAVM;AAYP,OAAO,MAAMI,MAAM,GAAG,CAACvB,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAuB;AACzC,SAAOS,QAAQ,IAAI;AACff,IAAAA,OAAO,CAAC2B,MAAR,GAAiBV,IAAjB,CAAsBC,GAAG,IAAI;AACzB,UAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BL,QAAAA,QAAQ,CAACZ,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AACJ,KAJD;AAKH,GAND;AAOH,CARM;AAUP,eAAeQ,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\n\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nexport const authSuccess = (id, email, login, isAuth) => ({ type: SET_USER_DATA, payload: {id, email, login, isAuth} })\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nexport const authReduser = (state = initialState, action) => {\n\n    switch (action.type) {\n        \n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const getAuthData = () => {\n    return dispatch => {\n        authAPI.me().then(res => {\n                if (res.data.resultCode === 0) {\n                    let { login, id, email } = res.data.data;\n                    dispatch(authSuccess(id, email, login, true));\n                    /* dispatch(setUser(id)); */\n                }\n            })\n    }\n}\n\nexport const login = (email, password, rememberMe) => {\n    return dispatch => {\n        authAPI.login(email, password, rememberMe).then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(getAuthData())\n            }\n            let message = res.data.messages.length > 0 ?    res.data.messages[0] : 'Some error'\n            dispatch(stopSubmit('login', {_error: message}))\n        })\n    }\n}\n\nexport const logout = (id, email, login,) => {\n    return dispatch => {\n        authAPI.logout().then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(authSuccess(null, null, null, false));\n            }\n        })\n    }\n}\n\nexport default authReduser;"]},"metadata":{},"sourceType":"module"}