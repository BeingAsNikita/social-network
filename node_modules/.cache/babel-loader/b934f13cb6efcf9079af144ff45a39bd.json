{"ast":null,"code":"import { authAPI } from \"../api/api\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nexport const authSuccess = (id, email, login) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login\n  }\n});\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload,\n        isAuth: true\n      };\n\n    default:\n      return state;\n  }\n};\nexport const getAuthData = () => {\n  return dispatch => {\n    authAPI.me().then(res => {\n      if (res.data.resultCode === 0) {\n        let {\n          login,\n          id,\n          email\n        } = res.data.data;\n        dispatch(authSuccess(id, email, login));\n        /* dispatch(setUser(id)); */\n      }\n    });\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return dispatch => {};\n};\nexport default authReduser;","map":{"version":3,"sources":["/home/nikita/Documents/it-kama/it-kama/src/redux/authReduser.js"],"names":["authAPI","SET_USER_DATA","authSuccess","id","email","login","type","payload","initialState","isAuth","authReduser","state","action","getAuthData","dispatch","me","then","res","data","resultCode","password","rememberMe"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AAGA,MAAMC,aAAa,GAAG,eAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,MAAuB;AAAEC,EAAAA,IAAI,EAAEL,aAAR;AAAuBM,EAAAA,OAAO,EAAE;AAACJ,IAAAA,EAAD;AAAKC,IAAAA,KAAL;AAAYC,IAAAA;AAAZ;AAAhC,CAAvB,CAApB;AAEP,IAAIG,YAAY,GAAG;AACfL,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfI,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAOA,OAAO,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAEzD,UAAQA,MAAM,CAACN,IAAf;AAEI,SAAKL,aAAL;AAEI,aAAO,EACH,GAAGU,KADA;AAEH,WAAGC,MAAM,CAACL,OAFP;AAGHE,QAAAA,MAAM,EAAE;AAHL,OAAP;;AAMJ;AACI,aAAOE,KAAP;AAXR;AAaH,CAfM;AAiBP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,SAAOC,QAAQ,IAAI;AACfd,IAAAA,OAAO,CAACe,EAAR,GAAaC,IAAb,CAAkBC,GAAG,IAAI;AACjB,UAAIA,GAAG,CAACC,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,YAAI;AAAEd,UAAAA,KAAF;AAASF,UAAAA,EAAT;AAAaC,UAAAA;AAAb,YAAuBa,GAAG,CAACC,IAAJ,CAASA,IAApC;AACAJ,QAAAA,QAAQ,CAACZ,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,CAAZ,CAAR;AACA;AACH;AACJ,KANL;AAOH,GARD;AASH,CAVM;AAYP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQgB,QAAR,EAAkBC,UAAlB,KAAiC;AAClD,SAAOP,QAAQ,IAAI,CAElB,CAFD;AAGH,CAJM;AAMP,eAAeJ,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\n\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nexport const authSuccess = (id, email, login) => ({ type: SET_USER_DATA, payload: {id, email, login} })\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nexport const authReduser = (state = initialState, action) => {\n\n    switch (action.type) {\n        \n        case SET_USER_DATA:\n            \n            return {\n                ...state,\n                ...action.payload,\n                isAuth: true\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const getAuthData = () => {\n    return dispatch => {\n        authAPI.me().then(res => {\n                if (res.data.resultCode === 0) {\n                    let { login, id, email } = res.data.data;\n                    dispatch(authSuccess(id, email, login));\n                    /* dispatch(setUser(id)); */\n                }\n            })\n    }\n}\n\nexport const login = (email, password, rememberMe) => {\n    return dispatch => {\n\n    }\n}\n\nexport default authReduser;"]},"metadata":{},"sourceType":"module"}