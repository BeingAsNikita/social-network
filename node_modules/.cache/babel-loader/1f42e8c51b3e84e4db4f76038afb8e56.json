{"ast":null,"code":"import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USER_DATA = 'SET_USER_DATA';\nexport const authSuccess = (id, email, login, isAuth) => ({\n  type: SET_USER_DATA,\n  payload: {\n    id,\n    email,\n    login,\n    isAuth\n  }\n});\nlet initialState = {\n  id: null,\n  email: null,\n  login: null,\n  isAuth: false\n};\nexport const authReduser = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USER_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\nexport const getAuthData = () => {\n  return async dispatch => {\n    let res = await authAPI.me();\n\n    if (res.data.resultCode === 0) {\n      let {\n        login,\n        id,\n        email\n      } = res.data.data;\n      dispatch(authSuccess(id, email, login, true));\n    }\n  };\n};\nexport const login = (email, password, rememberMe) => {\n  return async dispatch => {\n    let res = await authAPI.login(email, password, rememberMe);\n\n    if (res.data.resultCode === 0) {\n      dispatch(getAuthData());\n    } else {\n      let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error';\n      dispatch(stopSubmit('loginForm', {\n        _error: message\n      }));\n    }\n  };\n};\nexport const logout = (id, email, login) => {\n  return async dispatch => {\n    let res = await authAPI.logout();\n\n    if (res.data.resultCode === 0) {\n      dispatch(authSuccess(null, null, null, false));\n    }\n  };\n};\nexport default authReduser;","map":{"version":3,"sources":["/home/nikita/Documents/it-kama/it-kama/src/redux/authReduser.js"],"names":["authAPI","stopSubmit","SET_USER_DATA","authSuccess","id","email","login","isAuth","type","payload","initialState","authReduser","state","action","getAuthData","dispatch","res","me","data","resultCode","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAGA,MAAMC,aAAa,GAAG,eAAtB;AAEA,OAAO,MAAMC,WAAW,GAAG,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmBC,MAAnB,MAA+B;AAAEC,EAAAA,IAAI,EAAEN,aAAR;AAAuBO,EAAAA,OAAO,EAAE;AAAEL,IAAAA,EAAF;AAAMC,IAAAA,KAAN;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB;AAAhC,CAA/B,CAApB;AAEP,IAAIG,YAAY,GAAG;AACfN,EAAAA,EAAE,EAAE,IADW;AAEfC,EAAAA,KAAK,EAAE,IAFQ;AAGfC,EAAAA,KAAK,EAAE,IAHQ;AAIfC,EAAAA,MAAM,EAAE;AAJO,CAAnB;AAOA,OAAO,MAAMI,WAAW,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAEzD,UAAQA,MAAM,CAACL,IAAf;AAEI,SAAKN,aAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEH,WAAGC,MAAM,CAACJ;AAFP,OAAP;;AAKJ;AACI,aAAOG,KAAP;AATR;AAWH,CAbM;AAeP,OAAO,MAAME,WAAW,GAAG,MAAM;AAC7B,SAAO,MAAMC,QAAN,IAAkB;AACrB,QAAIC,GAAG,GAAG,MAAMhB,OAAO,CAACiB,EAAR,EAAhB;;AACA,QAAID,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3B,UAAI;AAAEb,QAAAA,KAAF;AAASF,QAAAA,EAAT;AAAaC,QAAAA;AAAb,UAAuBW,GAAG,CAACE,IAAJ,CAASA,IAApC;AACAH,MAAAA,QAAQ,CAACZ,WAAW,CAACC,EAAD,EAAKC,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAZ,CAAR;AACH;AAEJ,GAPD;AAQH,CATM;AAWP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQe,QAAR,EAAkBC,UAAlB,KAAiC;AAClD,SAAO,MAAMN,QAAN,IAAkB;AACrB,QAAIC,GAAG,GAAG,MAAMhB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBe,QAArB,EAA+BC,UAA/B,CAAhB;;AACA,QAAIL,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,CAACD,WAAW,EAAZ,CAAR;AACH,KAFD,MAEO;AACH,UAAIQ,OAAO,GAAGN,GAAG,CAACE,IAAJ,CAASK,QAAT,CAAkBC,MAAlB,GAA2B,CAA3B,GAA+BR,GAAG,CAACE,IAAJ,CAASK,QAAT,CAAkB,CAAlB,CAA/B,GAAsD,YAApE;AACAR,MAAAA,QAAQ,CAACd,UAAU,CAAC,WAAD,EAAc;AAAEwB,QAAAA,MAAM,EAAEH;AAAV,OAAd,CAAX,CAAR;AACH;AACJ,GARD;AASH,CAVM;AAYP,OAAO,MAAMI,MAAM,GAAG,CAACtB,EAAD,EAAKC,KAAL,EAAYC,KAAZ,KAAwB;AAC1C,SAAO,MAAMS,QAAN,IAAkB;AACrB,QAAIC,GAAG,GAAG,MAAMhB,OAAO,CAAC0B,MAAR,EAAhB;;AACA,QAAIV,GAAG,CAACE,IAAJ,CAASC,UAAT,KAAwB,CAA5B,EAA+B;AAC3BJ,MAAAA,QAAQ,CAACZ,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAZ,CAAR;AACH;AACJ,GALD;AAMH,CAPM;AASP,eAAeQ,WAAf","sourcesContent":["import { authAPI } from \"../api/api\";\nimport { stopSubmit } from \"redux-form\";\n\n\nconst SET_USER_DATA = 'SET_USER_DATA';\n\nexport const authSuccess = (id, email, login, isAuth) => ({ type: SET_USER_DATA, payload: { id, email, login, isAuth } })\n\nlet initialState = {\n    id: null,\n    email: null,\n    login: null,\n    isAuth: false\n}\n\nexport const authReduser = (state = initialState, action) => {\n\n    switch (action.type) {\n\n        case SET_USER_DATA:\n            return {\n                ...state,\n                ...action.payload,\n            }\n\n        default:\n            return state\n    }\n}\n\nexport const getAuthData = () => {\n    return async dispatch => {\n        let res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            let { login, id, email } = res.data.data;\n            dispatch(authSuccess(id, email, login, true));\n        }\n\n    }\n}\n\nexport const login = (email, password, rememberMe) => {\n    return async dispatch => {\n        let res = await authAPI.login(email, password, rememberMe)\n        if (res.data.resultCode === 0) {\n            dispatch(getAuthData())\n        } else {\n            let message = res.data.messages.length > 0 ? res.data.messages[0] : 'Some error'\n            dispatch(stopSubmit('loginForm', { _error: message }))\n        }\n    }\n}\n\nexport const logout = (id, email, login, ) => {\n    return async dispatch => {\n        let res = await authAPI.logout()\n        if (res.data.resultCode === 0) {\n            dispatch(authSuccess(null, null, null, false));\n        }\n    }\n}\n\nexport default authReduser;"]},"metadata":{},"sourceType":"module"}